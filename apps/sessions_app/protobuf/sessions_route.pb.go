// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sessions_route.proto

package sessions_route

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Session struct {
	Id                   string   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Session) Reset()         { *m = Session{} }
func (m *Session) String() string { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()    {}
func (*Session) Descriptor() ([]byte, []int) {
	return fileDescriptor_82402ddd756573c2, []int{0}
}

func (m *Session) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Session.Unmarshal(m, b)
}
func (m *Session) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Session.Marshal(b, m, deterministic)
}
func (m *Session) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Session.Merge(m, src)
}
func (m *Session) XXX_Size() int {
	return xxx_messageInfo_Session.Size(m)
}
func (m *Session) XXX_DiscardUnknown() {
	xxx_messageInfo_Session.DiscardUnknown(m)
}

var xxx_messageInfo_Session proto.InternalMessageInfo

func (m *Session) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type UserData struct {
	UserID               int32    `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserData) Reset()         { *m = UserData{} }
func (m *UserData) String() string { return proto.CompactTextString(m) }
func (*UserData) ProtoMessage()    {}
func (*UserData) Descriptor() ([]byte, []int) {
	return fileDescriptor_82402ddd756573c2, []int{1}
}

func (m *UserData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserData.Unmarshal(m, b)
}
func (m *UserData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserData.Marshal(b, m, deterministic)
}
func (m *UserData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserData.Merge(m, src)
}
func (m *UserData) XXX_Size() int {
	return xxx_messageInfo_UserData.Size(m)
}
func (m *UserData) XXX_DiscardUnknown() {
	xxx_messageInfo_UserData.DiscardUnknown(m)
}

var xxx_messageInfo_UserData proto.InternalMessageInfo

func (m *UserData) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_82402ddd756573c2, []int{2}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Session)(nil), "Session")
	proto.RegisterType((*UserData)(nil), "UserData")
	proto.RegisterType((*Empty)(nil), "Empty")
}

func init() { proto.RegisterFile("sessions_route.proto", fileDescriptor_82402ddd756573c2) }

var fileDescriptor_82402ddd756573c2 = []byte{
	// 179 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x29, 0x4e, 0x2d, 0x2e,
	0xce, 0xcc, 0xcf, 0x2b, 0x8e, 0x2f, 0xca, 0x2f, 0x2d, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x57, 0x92, 0xe4, 0x62, 0x0f, 0x86, 0x88, 0x0b, 0xf1, 0x71, 0x31, 0x79, 0xa6, 0x48, 0x30, 0x2a,
	0x30, 0x6a, 0x70, 0x06, 0x31, 0x79, 0xa6, 0x28, 0x29, 0x71, 0x71, 0x84, 0x16, 0xa7, 0x16, 0xb9,
	0x24, 0x96, 0x24, 0x0a, 0x89, 0x71, 0xb1, 0x81, 0xd8, 0x9e, 0x2e, 0x60, 0x79, 0xd6, 0x20, 0x28,
	0x4f, 0x89, 0x9d, 0x8b, 0xd5, 0x35, 0xb7, 0xa0, 0xa4, 0xd2, 0xa8, 0x98, 0x8b, 0x07, 0x6a, 0x4e,
	0x10, 0xc8, 0x74, 0x21, 0x45, 0x2e, 0x0e, 0xe7, 0xa2, 0xd4, 0xc4, 0x92, 0x54, 0x4f, 0x17, 0x21,
	0x4e, 0x3d, 0x98, 0x39, 0x52, 0x1c, 0x7a, 0x50, 0x55, 0x4a, 0x0c, 0x42, 0x0a, 0x5c, 0xec, 0xce,
	0x19, 0xa9, 0xc9, 0xd9, 0x9e, 0x2e, 0x42, 0x70, 0x61, 0x29, 0x84, 0x5a, 0x25, 0x06, 0x21, 0x39,
	0x2e, 0x0e, 0x97, 0xd4, 0x9c, 0x54, 0xb0, 0x21, 0x08, 0x25, 0x6c, 0x7a, 0x60, 0x2b, 0x95, 0x18,
	0x92, 0xd8, 0xc0, 0x7e, 0x30, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xd9, 0x30, 0x7d, 0xa7, 0xdb,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SessionRouteClient is the client API for SessionRoute service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SessionRouteClient interface {
	CreateID(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*Session, error)
	CheckID(ctx context.Context, in *Session, opts ...grpc.CallOption) (*UserData, error)
	DeleteID(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Empty, error)
}

type sessionRouteClient struct {
	cc *grpc.ClientConn
}

func NewSessionRouteClient(cc *grpc.ClientConn) SessionRouteClient {
	return &sessionRouteClient{cc}
}

func (c *sessionRouteClient) CreateID(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := c.cc.Invoke(ctx, "/SessionRoute/CreateID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionRouteClient) CheckID(ctx context.Context, in *Session, opts ...grpc.CallOption) (*UserData, error) {
	out := new(UserData)
	err := c.cc.Invoke(ctx, "/SessionRoute/CheckID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionRouteClient) DeleteID(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/SessionRoute/DeleteID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionRouteServer is the server API for SessionRoute service.
type SessionRouteServer interface {
	CreateID(context.Context, *UserData) (*Session, error)
	CheckID(context.Context, *Session) (*UserData, error)
	DeleteID(context.Context, *Session) (*Empty, error)
}

func RegisterSessionRouteServer(s *grpc.Server, srv SessionRouteServer) {
	s.RegisterService(&_SessionRoute_serviceDesc, srv)
}

func _SessionRoute_CreateID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionRouteServer).CreateID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SessionRoute/CreateID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionRouteServer).CreateID(ctx, req.(*UserData))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionRoute_CheckID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionRouteServer).CheckID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SessionRoute/CheckID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionRouteServer).CheckID(ctx, req.(*Session))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionRoute_DeleteID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionRouteServer).DeleteID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SessionRoute/DeleteID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionRouteServer).DeleteID(ctx, req.(*Session))
	}
	return interceptor(ctx, in, info, handler)
}

var _SessionRoute_serviceDesc = grpc.ServiceDesc{
	ServiceName: "SessionRoute",
	HandlerType: (*SessionRouteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateID",
			Handler:    _SessionRoute_CreateID_Handler,
		},
		{
			MethodName: "CheckID",
			Handler:    _SessionRoute_CheckID_Handler,
		},
		{
			MethodName: "DeleteID",
			Handler:    _SessionRoute_DeleteID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sessions_route.proto",
}
